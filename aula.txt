curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

    // pega qrr pacote e baixa como um esqueleto de app e ja roda o install
# composer create-project --prefer-dist laravel/lumen
    // Após a instalação do lumen, automaticamente será criado um diretório "lumen"
 # cd lumen
    // Startar o servidor local porta 8000 com o arquivo lumen
# php -S localhost:8000 -t public
    // Após isso, verificar a mesma:
    localhost:8000
    // Se instalado com sucesso, aparecerá a mensagem com a versão instalada do lumen
    Lumen (5.7.7) (Laravel Components 5.7.*)


->routes
    web.php
    - Teste de hello word
        #$router->get('/hello/world', function(){
            return "Hello word";
        });
        //Esta funcão será executada quando a URL for: http://localhost:8000/hello/world
    -Passando parametros pela URL
        //UTILIZAR {} 
            #$router->get('/hello/{name}}, function($name){
                return "Hello . $name";
            });
        //Desse modo, ao executar, por exemplo,  a URL: http://localhost:8000/hello/matheus
        // será exibido:
        "Hello matheus";
        // Pode-se também, criar um apelido para a rota
        $router->get('/hello/{name}}', ['as' =>'hello-world'], function($name){
            return "Hello . $name";
        });
        //RETORNA UM ARRAY ao acessar a URL descrita: http://localhost:8000/api/users
            $router->group([], function () use ($router) {
                $router->get('/api/users', function() {
                return[];
                });
            });
    // dentro do diretorio lumen
    // LISTA todos os comandos do lumen
        #php artisan                 
    // Artisan é o nome da interface da linha de comando incluída no Laravel. Esta interface fornece um bom número de comandos auxiliares 
        para que você use durante o desenvolvimento de sua aplicação. O artisan é impulsionado pelo poderoso componente de Console do Symfony 
        framework.
    ->app
        ->Htto
            ->Controllers
                HelloController.php
                    namespace App\Http\Controllers;
                    class HelloController extends Controller{
                        // criar action
                        public function index($names){
                            return 'Hello' . $name ;
                        }
        // CHAMA-SE DESSA MANEIRA:
        $router->get('/hello/{name}', 'HelloController@index');
        

     -Utilizando apelidos as rotas
     app->
        ->Http
            ->Controllers
                -> HelloController.php
                    <?php
                        namespace App\Http\Controllers;
                        class HelloController extends Controller{
                            // criar action
                            public function index($names){
                                return 'Hello' . $name ;
                            }

                        }
        -> routes 
            ->web.php
         $router->get('/hello/{name}', [
        'as' => 'hello-world',
        'uses' => 'HelloController@index'
        ]);
    
Fim aula 3
______________________________________________________________________________________________
    É necessário ativar o Eloquent para manipulaçao de banco de dados
-> Bootstrap
    ->app.php
    // Pesquisar por "Eloquent" e descomentar sua respectiva linha.
    ->app  
        ->User.php          // model do eloquent[pode-se utilizar o arquivo para ter acesso ao BD]
    // CONFIGURAR CONEXAO AO BANCO DE DADOS NO ARQUIVO .ENV

- CONCEITO DE MIGRATION E SEEDS
    -MIGRATION
            // Gerenciamento de mudanças incrementais e reversíveis em esquemas (estrutura) de banco de dados.
            Isso permite que seja possível ter um controle "das versões" do banco de dados.
            As migrations são executadas sempre que for necessário atualizar a estrutura do banco ou reverter as
             alterações para uma migration antiga. É algo muito usado no desenvolvimento de software ágil, onde 
             geralmente o desenvolvimento da aplicação é feito em conjunto com um banco de dados que está em construção.
             Assim, a estrutura da base de dados vai sendo alterada em conjunto com o desenvolvimento.
    -SEEDS
            // Como o próprio nome diz, um seeder é um semeador. Neste contexto específico serve para alimentar a base de dados com dados.
            Geralmente é usado para popular a base com dados padrões, necessários pro funcionamento correto da aplicação.
            Dependendo da ferramenta/framework que estiver usando, uma migration específica pode conter um seeder específico,
            mas tenha em mente que a migration atualiza a estrutura da base de dados, enquanto o seeder serve para popular a base.

- CRIANDO E EDITANDO OS 2 ARQUIVOS DE MIGRATIONS
    // Cria um arquivo de criação de tabelas
        # php artisan make:migration create_users_table 
    // cria arquivo de senhas
        # php artisan make:migration create_password_resets_table
    // Após isso, os respectivos arquivos serão criados no projeto no seguinte local:
        ->database->migrations

        -CREATE_USERS
            // Dentro da função up(), definir os parametros:
                Schema::create('users', function (Blueprint $table) {
                    $table->increments('id');
                    $table->string('name');
                    $table->string('email') ->unique();
                    $table->string('password');
                    $table->rememberToken();
                    $table->timestamps();
                });
            // Dentro da função down():
                Schema::dropIfExists('users');


        -CREATE_PASSWORD
            // Dentro da função up(), definir os parametros:
                Schema::create('password_resets', function (Blueprint $table) {
                    $table->string('email')->index();
                    $table->string('token')->index();
                    $table->rememberToken();
                    $table->timestamps('created_at')->nullable();
                });
            // Dentro da função down():
                Schema::dropIfExists('password_resets');
    VERIFICAÇÃO
        # php artisan migrate;
        // Se tudo ocorreu bem, irá ocorrer o seguinte retorno:
            Migration table created successfully.
            Migrating: 2019_01_30_101738_create_users_table
            Migrated:  2019_01_30_101738_create_users_table
            Migrating: 2019_01_30_103244_create_password_resets_table
            Migrated:  2019_01_30_103244_create_password_resets_table

        // desfazer alterações
        #php artisan: rollback

-SEEDS
    // Criando a semente para implementar os registros automaticos
    # php artisan make:seeder UserTableSeeder
    ->database->seeds->DatabaseSeeder.php
        //Descomentar a chamada da função
            $this->call('UsersTableSeeder');
    // Configurando o factory
        // Permite às classes delegar para subclasses decidirem, isso é feito através da criação de objetos
            que chamam o método fabrica especificado numa interface e implementado por um classe filha ou implementado 
            numa classe abstrata e opcionalmente sobrescrito por classes derivadas.
    ->database -> factories -> ModelFactory.php
        // biblioteca FAKER("Criadora de dados falsos")
        // Configurar o seguinte método 
        $factory->define(App\User::class, function (Faker\Generator $faker) {
            static $password;
            return [
                'name'              => $faker->name,
                'email'             => $faker->unique()->safeEmail,
                // Se a senha for passada, utilize-a. Caso contrario, gera-se um Hash
                'password'          => $password ?: $password = app('hash')->make('secret'),
                'remember_token'    => str_random(10),
            ];
        });

    ->database->seeds->UserTableSeeder.php
        // Configurar a função run do seguinte modo:
            public function run()
            {   //  toda vez que um seed roda, ele não da truncate automaticamente,ou seja, é inserido registro
                // sob registro
                \DB::table('users')->truncate();
                //  utiliza o factory e cria 30 registros. Se não passado parametro, cria-se 1.
                //  $factory->define(App\User::class, function (Faker\Generator $faker) 
                factory(App\User::class, 30) ->create();
            }
    // comando para executar o seeds e criar os 30 registros fakes
        # php artisan db:seed






    
